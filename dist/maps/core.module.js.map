{"version":3,"sources":["C:/Users/Patrick/Documents/Repos/CreateJS/core/node_modules/@createjs/core/src/events/Event.js","C:/Users/Patrick/Documents/Repos/CreateJS/core/node_modules/@createjs/core/src/events/EventDispatcher.js","C:/Users/Patrick/Documents/Repos/CreateJS/core/node_modules/@createjs/core/src/utils/Ticker.js"],"names":["Event","[object Object]","type","bubbles","cancelable","this","target","currentTarget","eventPhase","timeStamp","Date","getTime","defaultPrevented","propagationStopped","immediatePropagationStopped","removed","event","n","hasOwnProperty","props","constructor","name","EventDispatcher","p","prototype","addEventListener","on","removeEventListener","off","removeAllEventListeners","hasEventListener","dispatchEvent","_dispatchEvent","willTrigger","_listeners","_captureListeners","listener","useCapture","listeners","arr","push","scope","once","data","handleEvent","evt","call","remove","l","length","i","splice","eventObj","clone","e","parent","top","list","captureListeners","o","slice","Ticker","RAF_SYNCHED","RAF","TIMEOUT","super","timingMode","maxDelta","paused","_inited","_startTime","_pausedTime","_ticks","_pausedTicks","_interval","_lastTime","_times","_tickTimes","_timerId","_raf","interval","_setupTick","framerate","_getTime","f","window","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","init","ticks","times","Math","min","reduce","a","b","runTime","pauseable","_tick","mode","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","_handleRAF","bind","_handleSynch","setTimeout","_handleTimeout","time","elapsedTime","delta","unshift","pop","now","performance","_instance","toString","reset","getMeasuredTickTime","getMeasuredFPS","getEventTime","getTicks"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4CMA;EAELC,YAAaC,MAAMC,UAAU,OAAOC,aAAa;IAKhDC,KAAKH,OAAOA;IASZG,KAAKC,SAAS;IAYdD,KAAKE,gBAAgB;IAcrBF,KAAKG,aAAa;IAQlBH,KAAKF,UAAUA;IAQfE,KAAKD,aAAaA;IAQlBC,KAAKI,YAAY,IAAIC,OAAOC;IAS5BN,KAAKO,mBAAmB;IASxBP,KAAKQ,qBAAqB;IAS1BR,KAAKS,8BAA8B;IASnCT,KAAKU,UAAU;;EAShBd;IACCI,KAAKO,mBAAmBP,KAAKD;IAC7B,OAAOC;;EAQRJ;IACCI,KAAKQ,qBAAqB;IAC1B,OAAOR;;EAQRJ;IACCI,KAAKS,8BAA8BT,KAAKQ,qBAAqB;IAC7D,OAAOR;;EAaRJ;IACCI,KAAKU,UAAU;IACf,OAAOV;;EAQRJ;IACC,MAAMe,QAAQ,IAAIhB,MAAMK,KAAKH,MAAMG,KAAKF,SAASE,KAAKD;IACtD,KAAK,IAAIa,KAAKZ,MAAM;MACnB,IAAIA,KAAKa,eAAeD,IAAI;QAC3BD,MAAMC,KAAKZ,KAAKY;;;IAGlB,OAAOD;;EASRf,IAAKkB;IACJ,KAAK,IAAIF,KAAKE,OAAO;MAAEd,KAAKY,KAAKE,MAAMF;;IACvC,OAAOZ;;EAQRJ;IACC,WAAWI,KAAKe,YAAYC,cAAchB,KAAKH;;;;MCtK3CoB;EAYLrB,kBAAmBK;IAClB,MAAMiB,IAAID,gBAAgBE;IAC1BlB,OAAOmB,mBAAmBF,EAAEE;IAC5BnB,OAAOoB,KAAKH,EAAEG;IACdpB,OAAOqB,sBAAsBrB,OAAOsB,MAAML,EAAEI;IAC5CrB,OAAOuB,0BAA0BN,EAAEM;IACnCvB,OAAOwB,mBAAmBP,EAAEO;IAC5BxB,OAAOyB,gBAAgBR,EAAEQ;IACzBzB,OAAO0B,iBAAiBT,EAAES;IAC1B1B,OAAO2B,cAAcV,EAAEU;;EAGxBhC;IAMCI,KAAK6B,aAAa;IAOlB7B,KAAK8B,oBAAoB;;EAe1BlC,iBAAkBC,MAAMkC,UAAUC,aAAa;IAC9C,IAAIC;IACJ,IAAID,YAAY;MACfC,YAAYjC,KAAK8B,oBAAoB9B,KAAK8B;WACpC;MACNG,YAAYjC,KAAK6B,aAAa7B,KAAK6B;;IAEpC,IAAIK,MAAMD,UAAUpC;IACpB,IAAIqC,KAAK;MACRlC,KAAKsB,oBAAoBzB,MAAMkC,UAAUC;MACzCE,MAAMD,UAAUpC;;IAEjB,IAAIqC,KAAK;MAAEA,IAAIC,KAAKJ;WACf;MAAEE,UAAUpC,UAASkC;;IAC1B,OAAOA;;EAkCRnC,GAAIC,MAAMkC,UAAUK,QAAQ,MAAMC,OAAO,OAAOC,WAAWN,aAAa;IACvE,IAAID,SAASQ,aAAa;MACzBH,QAAQA,SAASL;MACjBA,WAAWA,SAASQ;;IAErBH,QAAQA,SAASpC;IACjB,OAAOA,KAAKoB,iBAAiBvB,MAAM2C;MAClCT,SAASU,KAAKL,OAAOI,KAAKF;MAC1BD,QAAQG,IAAIE;OACVV;;EAiBJpC,oBAAqBC,MAAMkC,UAAUC,aAAa;IACjD,MAAMC,YAAYD,aAAahC,KAAK8B,oBAAoB9B,KAAK6B;IAC7D,KAAKI,WAAW;MAAE;;IAClB,MAAMC,MAAMD,UAAUpC;IACtB,KAAKqC,KAAK;MAAE;;IACZ,MAAMS,IAAIT,IAAIU;IACd,KAAK,IAAIC,IAAI,GAAGA,IAAIF,GAAGE,KAAK;MAC3B,IAAIX,IAAIW,OAAOd,UAAU;QACxB,IAAIY,MAAM,GAAG;iBAASV,UAAUpC;eAC3B;UAAEqC,IAAIY,OAAOD,GAAG;;QACrB;;;;EAgBHjD,IAAKC,MAAMkC,UAAUC,aAAa;IACjChC,KAAKsB,oBAAoBzB,MAAMkC,UAAUC;;EAe1CpC,wBAAyBC,OAAO;IAC/B,IAAIA,MAAM;MACT,IAAIG,KAAK6B,YAAY;eAAS7B,KAAK6B,WAAWhC;;MAC9C,IAAIG,KAAK8B,mBAAmB;eAAS9B,KAAK8B,kBAAkBjC;;WACtD;MACNG,KAAK6B,aAAa7B,KAAK8B,oBAAoB;;;EAuB7ClC,cAAemD,UAAUjD,UAAU,OAAOC,aAAa;IACtD,WAAWgD,aAAa,UAAU;MAEjC,MAAMd,YAAYjC,KAAK6B;MACvB,KAAK/B,aAAamC,cAAcA,UAAUc,YAAY;QAAE,OAAO;;MAC/DA,WAAW,IAAIpD,MAAMoD,UAAUjD,SAASC;WAClC,IAAIgD,SAAS9C,UAAU8C,SAASC,OAAO;MAE7CD,WAAWA,SAASC;;IAIrB;MAAMD,SAAS9C,SAASD;MAAQ,OAAOiD;IAEvC,KAAKF,SAASjD,YAAYE,KAAKkD,QAAQ;MACtClD,KAAK2B,eAAeoB,UAAU;WACxB;MACN,IAAII,MAAMnD;MACV,MAAMoD,SAAQD;MACd,OAAOA,IAAID,QAAQ;QAAEE,KAAKjB,KAAKgB,MAAMA,IAAID;;MACzC,MAAMP,IAAIS,KAAKR;MACf,IAAIC;MAGJ,KAAKA,IAAIF,IAAI,GAAGE,KAAK,MAAME,SAASvC,oBAAoBqC,KAAK;QAC5DO,KAAKP,GAAGlB,eAAeoB,UAAU,KAAGF,KAAG;;MAGxC,KAAKA,IAAI,GAAGA,IAAIF,MAAMI,SAASvC,oBAAoBqC,KAAK;QACvDO,KAAKP,GAAGlB,eAAeoB,UAAU;;;IAGnC,QAAQA,SAASxC;;EASlBX,iBAAkBC;IACjB,MAAMoC,YAAYjC,KAAK6B,YAAYwB,mBAAmBrD,KAAK8B;IAC3D,UAAWG,aAAaA,UAAUpC,SAAWwD,oBAAoBA,iBAAiBxD;;EAcnFD,YAAaC;IACZ,IAAIyD,IAAItD;IACR,OAAOsD,GAAG;MACT,IAAIA,EAAE7B,iBAAiB5B,OAAO;QAAE,OAAO;;MACvCyD,IAAIA,EAAEJ;;IAEP,OAAO;;EAMRtD;IACC,WAAWI,KAAKe,YAAYC,OAAOhB,KAAKgB,WAAWhB,KAAKgB,SAAS;;EAQlEpB,eAAgBmD,UAAU5C;IACzB,MAAM8B,YAAY9B,eAAe,IAAIH,KAAK8B,oBAAoB9B,KAAK6B;IACnE,IAAIkB,YAAYd,WAAW;MAC1B,IAAIC,MAAMD,UAAUc,SAASlD;MAC7B,IAAI8C;MACJ,KAAKT,QAAQS,IAAIT,IAAIU,YAAY,GAAG;QAAE;;MACtC;QAAMG,SAAS7C,gBAAgBF;QAAQ,OAAOiD;MAC9C;QAAMF,SAAS5C,aAAaA;QAAc,OAAO8C;MACjDF,SAASrC,UAAU;MAEnBwB,MAAMA,IAAIqB;MACV,KAAK,IAAIV,IAAI,GAAGA,IAAIF,MAAMI,SAAStC,6BAA6BoC,KAAK;QACpE,IAAIS,IAAIpB,IAAIW;QACZ,IAAIS,EAAEf,aAAa;UAAEe,EAAEf,YAAYQ;eAC9B;UAAEO,EAAEP;;QACT,IAAIA,SAASrC,SAAS;UACrBV,KAAKuB,IAAIwB,SAASlD,MAAMyD,GAAGnD,eAAe;UAC1C4C,SAASrC,UAAU;;;;;;;MCrSlB8C,eAAevC;EAsBpBwC;IAA4B,OAAO;;EAenCC;IAAoB,OAAO;;EAW3BC;IAAwB,OAAO;;EAE/B/D,YAAaoB;IACZ4C;IAMA5D,KAAKgB,OAAOA;IAYZhB,KAAK6D,aAAaL,OAAOG;IAgBzB3D,KAAK8D,WAAW;IAiBhB9D,KAAK+D,SAAS;IAOd/D,KAAKgE,UAAU;IAOfhE,KAAKiE,aAAa;IAOlBjE,KAAKkE,cAAc;IASnBlE,KAAKmE,SAAS;IASdnE,KAAKoE,eAAe;IAOpBpE,KAAKqE,YAAY;IAOjBrE,KAAKsE,YAAY;IAOjBtE,KAAKuE,SAAS;IAOdvE,KAAKwE,aAAa;IASlBxE,KAAKyE,WAAW;IAUhBzE,KAAK0E,OAAO;;EAUbC;IAAkB,OAAO3E,KAAKqE;;EAC9BM,aAAcA;IACb3E,KAAKqE,YAAYM;IACjB,KAAK3E,KAAKgE,SAAS;MAAE;;IACrBhE,KAAK4E;;EASNC;IAAmB,OAAO,MAAO7E,KAAKqE;;EACtCQ,cAAeA;IAAa7E,KAAK2E,WAAW,MAAOE;;EAKnDjF;IACC,IAAII,KAAKgE,SAAS;MAAE;;IACpBhE,KAAKgE,UAAU;IACfhE,KAAKuE;IACLvE,KAAKwE;IACLxE,KAAKiE,aAAajE,KAAK8E;IACvB9E,KAAKuE,OAAOpC,KAAKnC,KAAKsE,YAAY;IAClCtE,KAAK4E;;EAMNhF;IACC,IAAII,KAAK0E,MAAM;MACd,IAAIK,IAAIC,OAAOC,wBAAwBD,OAAOE,8BAA8BF,OAAOG,2BAA2BH,OAAOI,yBAAyBJ,OAAOK;MACrJN,KAAKA,EAAE/E,KAAKyE;WACN;MACNa,aAAatF,KAAKyE;;IAEnBzE,KAAKwB,wBAAwB;IAC7BxB,KAAKyE,WAAWzE,KAAKuE,SAASvE,KAAKwE,aAAa;IAChDxE,KAAKiE,aAAajE,KAAKsE,YAAYtE,KAAKmE,SAAS;IACjDnE,KAAKgE,UAAU;;EAMhBpE,iBAAkBC,MAAMkC,UAAUC;KAChChC,KAAKgE,WAAWhE,KAAKuF;IACtB,OAAO3B,MAAMxC,iBAAiBvB,MAAMkC,UAAUC;;EAmB/CpC,oBAAqB4F,QAAQ;IAC5B,MAAMC,QAAQzF,KAAKwE;IACnB,KAAKiB,SAASA,MAAM7C,SAAS,GAAG;MAAE,QAAQ;;IAE1C4C,QAAQE,KAAKC,IAAIF,MAAM7C,QAAQ4C,SAAUxF,KAAK6E,YAAY;IAC1D,OAAOY,MAAMG,OAAO,CAACC,GAAGC,MAAMD,IAAIC,GAAG,KAAKN;;EAW3C5F,eAAgB4F,QAAQ;IACvB,MAAMC,QAAQzF,KAAKuE;IACnB,KAAKkB,SAASA,MAAM7C,SAAS,GAAG;MAAE,QAAQ;;IAE1C4C,QAAQE,KAAKC,IAAIF,MAAM7C,SAAS,GAAG4C,SAAUxF,KAAK6E,YAAY;IAC9D,OAAO,QAASY,MAAM,KAAKA,MAAMD,UAAUA;;EAY5C5F,QAASmG,UAAU;IAClB,OAAO/F,KAAKiE,aAAajE,KAAK8E,cAAciB,UAAU/F,KAAKkE,cAAc,MAAM;;EAUhFtE,aAAcmG,UAAU;IACvB,OAAO/F,KAAKiE,cAAcjE,KAAKsE,aAAatE,KAAKiE,eAAe8B,UAAU/F,KAAKkE,cAAc,MAAM;;EAYpGtE,SAAUoG,YAAY;IACrB,OAAOhG,KAAKmE,UAAU6B,YAAYhG,KAAKoE,eAAe;;EAMvDxE;IACCI,KAAKyE,WAAW;IAChBzE,KAAK4E;IAGL,IAAI5E,KAAK8E,aAAa9E,KAAKsE,cAActE,KAAKqE,YAAY,KAAK,KAAM;MACpErE,KAAKiG;;;EAOPrG;IACCI,KAAKyE,WAAW;IAChBzE,KAAK4E;IACL5E,KAAKiG;;EAMNrG;IACCI,KAAKyE,WAAW;IAChBzE,KAAK4E;IACL5E,KAAKiG;;EAMNrG;IACC,IAAII,KAAKyE,YAAY,MAAM;MAAE;;IAC7B,MAAMyB,OAAOlG,KAAK6D,cAAe7D,KAAK0E,QAAQlB,OAAOE;IACrD,IAAIwC,SAAS1C,OAAOC,eAAeyC,SAAS1C,OAAOE,KAAK;MACvD,MAAMqB,IAAIC,OAAOmB,yBAAyBnB,OAAOoB,+BAA+BpB,OAAOqB,4BAA4BrB,OAAOsB,0BAA0BtB,OAAOuB;MAC3J,IAAIxB,GAAG;QACN/E,KAAKyE,WAAWM,EAAEmB,SAAS1C,OAAOE,MAAM1D,KAAKwG,WAAWC,KAAKzG,QAAQA,KAAK0G,aAAaD,KAAKzG;QAC5FA,KAAK0E,OAAO;QACZ;;;IAGF1E,KAAK0E,OAAO;IACZ1E,KAAKyE,WAAWkC,WAAW3G,KAAK4G,eAAeH,KAAKzG,OAAOA,KAAKqE;;EAOjEzE;IACC,MAAMmE,SAAS/D,KAAK+D,QAAQ8C,OAAO7G,KAAK8E,YAAYgC,cAAcD,OAAO7G,KAAKsE;IAC9EtE,KAAKsE,YAAYuC;IACjB7G,KAAKmE;IAEL,IAAIJ,QAAQ;MACX/D,KAAKoE;MACLpE,KAAKkE,eAAe4C;;IAGrB,IAAI9G,KAAKyB,iBAAiB,SAAS;MAClC,MAAMd,QAAQ,IAAIhB,MAAM;MACxB,MAAMmE,WAAW9D,KAAK8D;MACtBnD,MAAMoG,QAASjD,YAAYgD,cAAchD,WAAYA,WAAWgD;MAChEnG,MAAMoD,SAASA;MACfpD,MAAMkG,OAAOA;MACblG,MAAMoF,UAAUc,OAAO7G,KAAKkE;MAC5BlE,KAAK0B,cAAcf;;IAGpBX,KAAKwE,WAAWwC,QAAQhH,KAAK8E,aAAa+B;IAC1C,OAAO7G,KAAKwE,WAAW5B,SAAS,KAAK;MAAE5C,KAAKwE,WAAWyC;;IAEvDjH,KAAKuE,OAAOyC,QAAQH;IACpB,OAAO7G,KAAKuE,OAAO3B,SAAS,KAAK;MAAE5C,KAAKuE,OAAO0C;;;EAMhDrH;IACC,MAAMsH,MAAMlC,OAAOmC,eAAenC,OAAOmC,YAAYD;IACrD,QAASA,OAAOA,IAAIzE,KAAK0E,gBAAkB,IAAI9G,OAAOC,aAAcN,KAAKiE;;EAG1ErE,UAAWC,MAAMkC,UAAUK,OAAOC,MAAMC,MAAMN;IAAc,OAAOoF,UAAU/F,GAAGxB,MAAMkC,UAAUK,OAAOC,MAAMC,MAAMN;;EACnHpC,2BAA4BC,MAAMkC,UAAUC;IAAcoF,UAAU9F,oBAAoBzB,MAAMkC,UAAUC;;EACxGpC,WAAYC,MAAMkC,UAAUC;IAAcoF,UAAU7F,IAAI1B,MAAMkC,UAAUC;;EACxEpC,+BAAgCC;IAAQuH,UAAU5F,wBAAwB3B;;EAC1ED,qBAAsBmD,UAAUjD,SAASC;IAAc,OAAOqH,UAAU1F,cAAcqB,UAAUjD,SAASC;;EACzGH,wBAAyBC;IAAQ,OAAOuH,UAAU3F,iBAAiB5B;;EACnED,mBAAoBC;IAAQ,OAAOuH,UAAUxF,YAAY/B;;EACzDD;IAAqB,OAAOwH,UAAUC;;EACtCzH;IAAiBwH,UAAU7B;;EAC3B3F;IAAkBwH,UAAUE;;EAC5B1H,wBAAyBC,MAAMkC,UAAUC;IAAcoF,UAAUhG,iBAAiBvB,MAAMkC,UAAUC;;EAClGpC,2BAA4B4F;IAAS,OAAO4B,UAAUG,oBAAoB/B;;EAC1E5F,sBAAuB4F;IAAS,OAAO4B,UAAUI,eAAehC;;EAChE5F,eAAgBmG;IAAW,OAAOqB,UAAU9G,QAAQyF;;EACpDnG,oBAAqBmG;IAAW,OAAOqB,UAAUK,aAAa1B;;EAC9DnG,gBAAiBoG;IAAa,OAAOoB,UAAUM,SAAS1B;;EAExDrB;IAAyB,OAAOyC,UAAUzC;;EAC1CA,oBAAqBA;IAAYyC,UAAUzC,WAAWA;;EACtDE;IAA0B,OAAOuC,UAAUvC;;EAC3CA,qBAAsBA;IAAauC,UAAUvC,YAAYA;;EACzD7D;IAAqB,OAAOoG,UAAUpG;;EACtCA,gBAAiBA;IAAQoG,UAAUpG,OAAOA;;EAC1C6C;IAA2B,OAAOuD,UAAUvD;;EAC5CA,sBAAuBA;IAAcuD,UAAUvD,aAAaA;;EAC5DC;IAAyB,OAAOsD,UAAUtD;;EAC1CA,oBAAqBA;IAAYsD,UAAUtD,WAAWA;;EACtDC;IAAuB,OAAOqD,UAAUrD;;EACxCA,kBAAmBA;IAAUqD,UAAUrD,SAASA;;;;AAyBjD,MAAMqD,YAAY,IAAI5D,OAAO","file":"../core.module.js","sourcesContent":["/**\n * @license Event\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Contains properties and methods shared by all events for use with {@link core.EventDispatcher}.\n * Note that Event objects are often reused, so you should never\n * rely on an event object's state outside of the call stack it was received in.\n *\n * @memberof core\n * @example\n * const evt = new Event(\"myEvent\");\n * const dispatcher = new EventDispatcher();\n * dispatcher.on(\"myEvent\", event => console.log(event.type));\n * dispatcher.dispatchEvent(evt); // logs \"myEvent\"\n *\n * @param {string} type The event type.\n * @param {boolean} [bubbles=false] Indicates whether the event will bubble through the display list.\n * @param {boolean} [cancelable=false] Indicates whether the default behaviour of this event can be cancelled.\n */\nclass Event {\n\n\tconstructor (type, bubbles = false, cancelable = false) {\n\t\t/**\n\t\t * The type of event.\n\t\t * @type string\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The object that generated an event.\n\t\t *\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.target = null;\n\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t *\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.currentTarget = null;\n\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:\n\t\t * <OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t *\n\t\t * @type number\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.eventPhase = 0;\n\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t *\n\t\t * @type boolean\n\t\t * @readonly\n\t\t */\n\t\tthis.bubbles = bubbles;\n\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via {@link core.Event#preventDefault}.\n\t\t *\n\t\t * @type boolean\n\t\t * @readonly\n\t\t */\n\t\tthis.cancelable = cancelable;\n\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t *\n\t\t * @type number\n\t\t * @readonly\n\t\t */\n\t\tthis.timeStamp = new Date().getTime();\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#preventDefault} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.defaultPrevented = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#stopPropagation} or {@link core.Event#stopImmediatePropagation} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.propagationStopped = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#stopImmediatePropagation} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.immediatePropagationStopped = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#remove} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.removed = false;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#defaultPrevented} to true if the event is cancelable.\n\t * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n\t * cancel the default behaviour associated with the event.\n\t * @return {core.Event} this, chainable\n\t */\n\tpreventDefault () {\n\t\tthis.defaultPrevented = this.cancelable;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#propagationStopped} to true.\n\t * Mirrors the DOM event standard.\n\t * @return {core.Event} this, chainable\n\t */\n\tstopPropagation () {\n\t\tthis.propagationStopped = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#propagationStopped} and {@link core.Event#immediatePropagationStopped} to true.\n\t * Mirrors the DOM event standard.\n\t * @return {core.Event} this, chainable\n\t */\n\tstopImmediatePropagation () {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t *\n\t * @example\n\t * myBtn.addEventListener(\"click\", event => {\n\t *   event.remove(); // removes this listener.\n\t * });\n\t *\n\t * @return {core.Event} this, chainable\n\t */\n\tremove () {\n\t\tthis.removed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a clone of the Event instance.\n\t *\n\t * @return {core.Event} a clone of the Event instance.\n\t */\n\tclone () {\n\t\tconst event = new Event(this.type, this.bubbles, this.cancelable);\n\t\tfor (let n in this) {\n\t\t\tif (this.hasOwnProperty(n)) {\n\t\t\t\tevent[n] = this[n];\n\t\t\t}\n\t\t}\n\t\treturn event;\n\t}\n\n\t/**\n\t * Provides a return {core.Event} this, chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {core.Event} this, chainable\n\t */\n\tset (props) {\n\t\tfor (let n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t *\n\t * @return {string} A string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name} (type=${this.type})]`;\n\t}\n\n}\n\nexport default Event;\n","/**\n * @license EventDispatcher\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport Event from \"./Event\";\n\n/**\n * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n *\n * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\n * EventDispatcher {@link core.EventDispatcher.initialize} method.\n *\n * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\n * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\n * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n *\n * EventDispatcher also exposes a {@link core.EventDispatcher#on} method, which makes it easier\n * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The\n * {@link core.EventDispatcher#off} method is merely an alias to {@link core.EventDispatcher#removeEventListener}.\n *\n * Another addition to the DOM Level 2 model is the {@link core.EventDispatcher#removeAllEventListeners}\n * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also\n * includes a {@link core.Event#remove} method which removes the active listener.\n *\n * @memberof core\n * @example\n * // add EventDispatcher capabilities to the \"MyClass\" class.\n * EventDispatcher.initialize(MyClass.prototype);\n *\n * // Add an event.\n * instance.addEventListener(\"eventName\", event => console.log(event.target + \" was clicked.\"));\n *\n * // scope (\"this\") can be be a challenge with events.\n * // using the {@link core.EventDispatcher#on} method to subscribe to events simplifies this.\n * instance.addEventListener(\"click\", event => console.log(instance === this)); // false, scope is ambiguous.\n * instance.on(\"click\", event => console.log(instance === this)); // true, `on` uses dispatcher scope by default.\n */\nclass EventDispatcher {\n\n\t/**\n\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\n\t *\n\t * @static\n\t * @example\n\t * EventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n\t * EventDispatcher.initialize(myInstance); // add to a specific instance\n\t *\n\t * @param {Object} target The target object to inject EventDispatcher methods into.\n\t */\n\tstatic initialize (target) {\n\t\tconst p = EventDispatcher.prototype;\n\t\ttarget.addEventListener = p.addEventListener;\n\t\ttarget.on = p.on;\n\t\ttarget.removeEventListener = target.off = p.removeEventListener;\n\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\n\t\ttarget.hasEventListener = p.hasEventListener;\n\t\ttarget.dispatchEvent = p.dispatchEvent;\n\t\ttarget._dispatchEvent = p._dispatchEvent;\n\t\ttarget.willTrigger = p.willTrigger;\n\t}\n\n\tconstructor () {\n\t\t/**\n\t\t * @private\n\t\t * @default null\n\t\t * @type Object\n\t\t */\n\t\tthis._listeners = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @default null\n\t\t * @type Object\n\t\t */\n\t\tthis._captureListeners = null;\n\t}\n\n\t/**\n\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\n\t * multiple callbacks getting fired.\n\t *\n\t * @example\n\t * displayObject.addEventListener(\"click\", event => console.log('clicked', event));\n\t *\n\t * @param {string} type The string type of the event.\n\t * @param {Function|Object} listener An object with a handleEvent method, or a function that will be called when the event is dispatched.\n\t * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t * @return {Function|Object} Returns the listener for chaining or assignment.\n\t */\n\taddEventListener (type, listener, useCapture = false) {\n\t\tlet listeners;\n\t\tif (useCapture) {\n\t\t\tlisteners = this._captureListeners = this._captureListeners || {};\n\t\t} else {\n\t\t\tlisteners = this._listeners = this._listeners || {};\n\t\t}\n\t\tlet arr = listeners[type];\n\t\tif (arr) {\n\t\t\tthis.removeEventListener(type, listener, useCapture);\n\t\t\tarr = listeners[type]; // remove may have deleted the array\n\t\t}\n\t\tif (arr) { arr.push(listener);  }\n\t\telse { listeners[type] = [listener]; }\n\t\treturn listener;\n\t}\n\n\t/**\n\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\n\t * only run once, associate arbitrary data with the listener, and remove the listener.\n\t *\n\t * This method works by creating an anonymous wrapper function and subscribing it with `addEventListener`.\n\t * The wrapper function is returned for use with `removeEventListener` (or `off`).\n\t *\n\t * To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n\t * {@link core.Event#remove}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\n\t * to `on` with the same params will create multiple listeners.\n\t *\n\t * @example\n\t * const listener = myBtn.on(\"click\", handleClick, null, false, { count: 3 });\n\t * function handleClick (evt, data) {\n\t *   data.count -= 1;\n\t *   console.log(this == myBtn); // true - scope defaults to the dispatcher\n\t *   if (data.count == 0) {\n\t *     alert(\"clicked 3 times!\");\n\t *     myBtn.off(\"click\", listener);\n\t *     // alternately: evt.remove();\n\t *   }\n\t * }\n\t *\n\t * @param {string} type The string type of the event.\n\t * @param {Function|Object} listener An object with a handleEvent method, or a function that will be called when the event is dispatched.\n\t * @param {Object} [scope=null] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\n\t * @param {boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\n\t * @param {*} [data={}] Arbitrary data that will be included as the second parameter when the listener is called.\n\t * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\n\t */\n\ton (type, listener, scope = null, once = false, data = {}, useCapture = false) {\n\t\tif (listener.handleEvent) {\n\t\t\tscope = scope || listener;\n\t\t\tlistener = listener.handleEvent;\n\t\t}\n\t\tscope = scope || this;\n\t\treturn this.addEventListener(type, evt => {\n\t\t\tlistener.call(scope, evt, data);\n\t\t\tonce && evt.remove();\n\t\t}, useCapture);\n\t}\n\n\t/**\n\t * Removes the specified event listener.\n\t *\n\t * You must pass the exact function reference used when the event was added. If a proxy\n\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\n\t * closure will not work.\n\t *\n\t * @example\n\t * displayObject.removeEventListener(\"click\", handleClick);\n\t *\n\t * @param {string} type The string type of the event.\n\t * @param {Function|Object} listener The listener function or object.\n\t * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t */\n\tremoveEventListener (type, listener, useCapture = false) {\n\t\tconst listeners = useCapture ? this._captureListeners : this._listeners;\n\t\tif (!listeners) { return; }\n\t\tconst arr = listeners[type];\n\t\tif (!arr) { return; }\n\t\tconst l = arr.length;\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tif (arr[i] === listener) {\n\t\t\t\tif (l === 1) { delete(listeners[type]); } // allows for faster checks.\n\t\t\t\telse { arr.splice(i, 1); }\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n\t * `on` method.\n\t *\n\t * To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See\n\t * {@link core.EventDispatcher#on} for an example.\n\t *\n\t * @param {string} type The string type of the event.\n\t * @param {Function|Object} listener The listener function or object.\n\t * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t */\n\toff (type, listener, useCapture = false) {\n\t\tthis.removeEventListener(type, listener, useCapture);\n\t}\n\n\t/**\n\t * Removes all listeners for the specified type, or all listeners of all types.\n\t *\n\t * @example\n\t * // remove all listeners\n\t * displayObject.removeAllEventListeners();\n\t *\n\t * // remove all click listeners\n\t * displayObject.removeAllEventListeners(\"click\");\n\t *\n\t * @param {string} [type=null] The string type of the event. If omitted, all listeners for all types will be removed.\n\t */\n\tremoveAllEventListeners (type = null) {\n\t\tif (type) {\n\t\t\tif (this._listeners) { delete(this._listeners[type]); }\n\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\n\t\t} else {\n\t\t\tthis._listeners = this._captureListeners = null;\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches the specified event to all listeners.\n\t *\n\t * @example\n\t * // use a string event\n\t * this.dispatchEvent(\"complete\")\n\t *\n\t * // use an Event instance\n\t * const event = new createjs.Event(\"progress\");\n\t * this.dispatchEvent(event);\n\t *\n\t * @param {Object|Event|string} eventObj An object with a \"type\" property, or a string type.\n\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\n\t * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\n\t * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.\n\t * @param {boolean} [bubbles=false] Specifies the `bubbles` value when a string was passed to eventObj.\n\t * @param {boolean} [cancelable=false] Specifies the `cancelable` value when a string was passed to eventObj.\n\t * @return {boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.\n\t */\n\tdispatchEvent (eventObj, bubbles = false, cancelable = false) {\n\t\tif (typeof eventObj === \"string\") {\n\t\t\t// skip everything if there's no listeners and it doesn't bubble:\n\t\t\tconst listeners = this._listeners;\n\t\t\tif (!bubbles && (!listeners || !listeners[eventObj])) { return true; }\n\t\t\teventObj = new Event(eventObj, bubbles, cancelable);\n\t\t} else if (eventObj.target && eventObj.clone) {\n\t\t\t// redispatching an active event object, so clone it:\n\t\t\teventObj = eventObj.clone();\n\t\t}\n\n\t\t// TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent\n\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\n\n\t\tif (!eventObj.bubbles || !this.parent) {\n\t\t\tthis._dispatchEvent(eventObj, 2);\n\t\t} else {\n\t\t\tlet top = this;\n\t\t\tconst list = [top];\n\t\t\twhile (top.parent) { list.push(top = top.parent); }\n\t\t\tconst l = list.length;\n\t\t\tlet i;\n\n\t\t\t// capture & atTarget\n\t\t\tfor (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\n\t\t\t}\n\t\t\t// bubbling\n\t\t\tfor (i = 1; i < l && !eventObj.propagationStopped; i++) {\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\n\t\t\t}\n\t\t}\n\t\treturn !eventObj.defaultPrevented;\n\t}\n\n\t/**\n\t * Indicates whether there is at least one listener for the specified event type.\n\t *\n\t * @param {string} type The string type of the event.\n\t * @return {boolean} Returns true if there is at least one listener for the specified event.\n\t */\n\thasEventListener (type) {\n\t\tconst listeners = this._listeners, captureListeners = this._captureListeners;\n\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\n\t}\n\n\t/**\n\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\n\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\n\t * specified type is dispatched from this object, it will trigger at least one listener.\n\t *\n\t * This is similar to {@link core.EventDispatcher#hasEventListener}, but it searches the entire\n\t * event flow for a listener, not just this object.\n\t *\n\t * @param {string} type The string type of the event.\n\t * @return {boolean} Returns `true` if there is at least one listener for the specified event.\n\t */\n\twillTrigger (type) {\n\t\tlet o = this;\n\t\twhile (o) {\n\t\t\tif (o.hasEventListener(type)) { return true; }\n\t\t\to = o.parent;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name + this.name ? ` ${this.name}` : \"\"}]`;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object|Event|string} eventObj\n\t * @param {Object} eventPhase\n\t */\n\t_dispatchEvent (eventObj, eventPhase) {\n\t\tconst listeners = eventPhase === 1 ? this._captureListeners : this._listeners;\n\t\tif (eventObj && listeners) {\n\t\t\tlet arr = listeners[eventObj.type];\n\t\t\tlet l;\n\t\t\tif (!arr || (l = arr.length) === 0) { return; }\n\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\n\t\t\ttry { eventObj.eventPhase = eventPhase; } catch (e) {}\n\t\t\teventObj.removed = false;\n\n\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\n\t\t\tfor (let i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {\n\t\t\t\tlet o = arr[i];\n\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\n\t\t\t\telse { o(eventObj); }\n\t\t\t\tif (eventObj.removed) {\n\t\t\t\t\tthis.off(eventObj.type, o, eventPhase === 1);\n\t\t\t\t\teventObj.removed = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport default EventDispatcher;\n","/**\n * @license Ticker\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport Event from \"../events/Event\";\n\n/**\n * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\n * event to be notified when a set time interval has elapsed.\n *\n * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\n * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\n * can not be instantiated.\n *\n * @todo Pass timingMode, maxDelta, paused values as instantiation arguments?\n *\n * @memberof core\n * @example\n * Ticker.addEventListener(\"tick\", event => {\n *   // Actions carried out each tick (aka frame)\n *   if (!event.paused) {\n *     // Actions carried out when the Ticker is not paused.\n *   }\n * });\n * @example\n * // Ticker export explanation\n * import Ticker, { Ticker as TickerClass, getTicker } from \"@createjs/core\";\n * Ticker.name, Ticker.RAF // -> createjs.global, undefined\n * TickerClass.RAF // -> raf\n * Ticker === getTicker(\"createjs.global\") // -> true\n *\n * @extends core.EventDispatcher\n * @param {string} name The name assigned to this instance.\n */\nclass Ticker extends EventDispatcher {\n\n\t/**\n\t * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\n\t * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\n\t * dispatches the tick when the time is within a certain threshold.\n\t *\n\t * This mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\n\t * but does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\n\t * gaining the benefits of that API (screen synch, background throttling).\n\t *\n\t * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\n\t * framerates of 10, 12, 15, 20, and 30 work well.\n\t *\n\t * Falls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t * supported.\n\t *\n\t * @static\n\t * @type {string}\n\t * @default \"synched\"\n\t * @readonly\n\t */\n\tstatic get RAF_SYNCHED () { return \"synched\"; }\n\n\t/**\n\t * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\n\t * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\n\t * You can leverage {@link core.Ticker#getTime} and the {@link core.Ticker#event:tick}\n\t * event object's \"delta\" properties to make this easier.\n\t *\n\t * Falls back on {@link core.Ticker.TIMEOUT} if the requestAnimationFrame API is not supported.\n\t *\n\t * @static\n\t * @type {string}\n\t * @default \"raf\"\n\t * @readonly\n\t */\n\tstatic get RAF () { return \"raf\"; }\n\n\t/**\n\t * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\n\t * provide the benefits of requestAnimationFrame (screen synch, background throttling).\n\t *\n\t * @static\n\t * @type {string}\n\t * @default \"timeout\"\n\t * @readonly\n\t */\n\tstatic get TIMEOUT () { return \"timeout\"; }\n\n\tconstructor (name) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The name of this instance.\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use.\n\t\t *\n\t\t * @see {@link core.Ticker.TIMEOUT}\n\t\t * @see {@link core.Ticker.RAF}\n\t\t * @see {@link core.Ticker.RAF_SYNCHED}\n\t\t *\n\t\t * @type {string}\n\t\t * @default Ticker.TIMEOUT\n\t\t */\n\t\tthis.timingMode = Ticker.TIMEOUT;\n\n\t\t/**\n\t\t * Specifies a maximum value for the delta property in the tick event object. This is useful when building time\n\t\t * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\n\t\t * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n\t\t * (ex. maxDelta=50 when running at 40fps).\n\t\t *\n\t\t * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\n\t\t * when using both delta and other values.\n\t\t *\n\t\t * If 0, there is no maximum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.maxDelta = 0;\n\n\t\t/**\n\t\t * When the ticker is paused, all listeners will still receive a tick event, but the `paused` property\n\t\t * of the event will be `true`. Also, while paused the `runTime` will not increase.\n\t\t *\n\t\t * @example\n\t\t * Ticker.addEventListener(\"tick\", event => console.log(event.paused, Ticker.getTime(false), Ticker.getTime(true)));\n\t\t * Ticker.paused = true;\n\t\t *\n\t\t * @see {@link core.Ticker#event:tick}\n\t\t * @see {@link core.Ticker#getTime}\n\t\t * @see {@link core.Ticker#getEventTime}\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.paused = false;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._inited = false;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._startTime = 0;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._pausedTime = 0;\n\n\t\t/**\n\t\t * The number of ticks that have passed.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._ticks = 0;\n\n\t\t/**\n\t\t * The number of ticks that have passed while Ticker has been paused.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default\n\t\t */\n\t\tthis._pausedTicks = 0;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default\n\t\t */\n\t\tthis._interval = 50;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default\n\t\t */\n\t\tthis._lastTime = 0;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Array}\n\t\t * @default null\n\t\t */\n\t\tthis._times = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Array}\n\t\t * @default null\n\t\t */\n\t\tthis._tickTimes = null;\n\n\t\t/**\n\t\t * Stores the timeout or requestAnimationFrame id.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default null\n\t\t */\n\t\tthis._timerId = null;\n\n\t\t/**\n\t\t * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\n\t\t * if that property changed and a tick hasn't fired.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis._raf = true;\n\t}\n\n\t/**\n\t * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n\t * Note that actual time between ticks may be more than specified depending on CPU load.\n\t * This property is ignored if the ticker is using the `RAF` timing mode.\n\t *\n\t * @type {number}\n\t */\n\tget interval () { return this._interval; }\n\tset interval (interval) {\n\t\tthis._interval = interval;\n\t\tif (!this._inited) { return; }\n\t\tthis._setupTick();\n\t}\n\n\t/**\n\t * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n\t * `framerate == 1000/interval`.\n\t *\n\t * @type {number}\n\t */\n\tget framerate () { return 1000 / this._interval; }\n\tset framerate (framerate) { this.interval = 1000 / framerate; }\n\n\t/**\n\t * Starts the tick. This is called automatically when the first listener is added.\n\t */\n\tinit () {\n\t\tif (this._inited) { return; }\n\t\tthis._inited = true;\n\t\tthis._times = [];\n\t\tthis._tickTimes = [];\n\t\tthis._startTime = this._getTime();\n\t\tthis._times.push(this._lastTime = 0);\n\t\tthis._setupTick();\n\t}\n\n\t/**\n\t * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.\n\t */\n\treset () {\n\t\tif (this._raf) {\n\t\t\tlet f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n\t\t\tf && f(this._timerId);\n\t\t} else {\n\t\t\tclearTimeout(this._timerId);\n\t\t}\n\t\tthis.removeAllEventListeners(\"tick\");\n\t\tthis._timerId = this._times = this._tickTimes = null;\n\t\tthis._startTime = this._lastTime = this._ticks = 0;\n\t\tthis._inited = false;\n\t}\n\n\t/**\n\t * Init the Ticker instance if it hasn't been already.\n\t */\n\taddEventListener (type, listener, useCapture) {\n\t\t!this._inited && this.init();\n\t\treturn super.addEventListener(type, listener, useCapture);\n\t}\n\n\t/**\n\t * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\n\t * because it only measures the time spent within the tick execution stack.\n\t *\n\t * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between\n\t * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that\n\t * there may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n\t *\n\t * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\n\t * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\n\t * other than the tick is using ~80ms (another script, DOM rendering, etc).\n\t *\n\t * @param {number} [ticks=null] The number of previous ticks over which to measure the average time spent in a tick.\n\t * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.\n\t * @return {number} The average time spent in a tick in milliseconds.\n\t */\n\tgetMeasuredTickTime (ticks = null) {\n\t\tconst times = this._tickTimes;\n\t\tif (!times || times.length < 1) { return -1; }\n\t\t// by default, calculate average for the past ~1 second:\n\t\tticks = Math.min(times.length, ticks || (this.framerate | 0));\n\t\treturn times.reduce((a, b) => a + b, 0) / ticks;\n\t}\n\n\t/**\n\t * Returns the actual frames / ticks per second.\n\t *\n\t * @param {number} [ticks=null] The number of previous ticks over which to measure the actual frames / ticks per second.\n\t * Defaults to the number of ticks per second.\n\t * @return {number} The actual frames / ticks per second. Depending on performance, this may differ\n\t * from the target frames per second.\n\t */\n\tgetMeasuredFPS (ticks = null) {\n\t\tconst times = this._times;\n\t\tif (!times || times.length < 2) { return -1; }\n\t\t// by default, calculate fps for the past ~1 second:\n\t\tticks = Math.min(times.length - 1, ticks || (this.framerate | 0));\n\t\treturn 1000 / ((times[0] - times[ticks]) / ticks);\n\t}\n\n\t/**\n\t * Returns the number of milliseconds that have elapsed since Ticker was initialized via {@link core.Ticker#init}.\n\t * Returns -1 if Ticker has not been initialized. For example, you could use\n\t * this in a time synchronized animation to determine the exact amount of time that has elapsed.\n\t *\n\t * @param {boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.\n\t * If false, the value returned will be total time elapsed since the first tick event listener was added.\n\t * @return {number} Number of milliseconds that have elapsed since Ticker was initialized or -1.\n\t */\n\tgetTime (runTime = false) {\n\t\treturn this._startTime ? this._getTime() - (runTime ? this._pausedTime : 0) : -1;\n\t}\n\n\t/**\n\t * Similar to {@link core.Ticker#getTime}, but returns the time on the most recent {@link core.Ticker#event:tick}\n\t * event object.\n\t *\n\t * @param {boolean} [runTime=false] If true, the runTime property will be returned instead of time.\n\t * @returns {number} The time or runTime property from the most recent tick event or -1.\n\t */\n\tgetEventTime (runTime = false) {\n\t\treturn this._startTime ? (this._lastTime || this._startTime) - (runTime ? this._pausedTime : 0) : -1;\n\t}\n\n\t/**\n\t * Returns the number of ticks that have been broadcast by Ticker.\n\t *\n\t * @param {boolean} [pauseable=false] Indicates whether to include ticks that would have been broadcast\n\t * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\n\t * If false, tick events that would have been broadcast while Ticker was paused will be included in the return\n\t * value.\n\t * @return {number} of ticks that have been broadcast.\n\t */\n\tgetTicks (pauseable = false) {\n\t\treturn this._ticks - (pauseable ? this._pausedTicks : 0);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleSynch () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\n\t\t// run if enough time has elapsed, with a little bit of flexibility to be early:\n\t\tif (this._getTime() - this._lastTime >= (this._interval - 1) * 0.97) {\n\t\t\tthis._tick();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleRAF () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\t\tthis._tick();\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTimeout () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\t\tthis._tick();\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_setupTick () {\n\t\tif (this._timerId != null) { return; } // avoid duplicates\n\t\tconst mode = this.timingMode || (this._raf && Ticker.RAF);\n\t\tif (mode === Ticker.RAF_SYNCHED || mode === Ticker.RAF) {\n\t\t\tconst f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\t\t\tif (f) {\n\t\t\t\tthis._timerId = f(mode === Ticker.RAF ? this._handleRAF.bind(this) : this._handleSynch.bind(this));\n\t\t\t\tthis._raf = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._raf = false;\n\t\tthis._timerId = setTimeout(this._handleTimeout.bind(this), this._interval);\n\t}\n\n\t/**\n\t * @private\n\t * @emits core.Ticker#event:tick\n\t */\n\t_tick () {\n\t\tconst paused = this.paused, time = this._getTime(), elapsedTime = time - this._lastTime;\n\t\tthis._lastTime = time;\n\t\tthis._ticks++;\n\n\t\tif (paused) {\n\t\t\tthis._pausedTicks++;\n\t\t\tthis._pausedTime += elapsedTime;\n\t\t}\n\n\t\tif (this.hasEventListener(\"tick\")) {\n\t\t\tconst event = new Event(\"tick\");\n\t\t\tconst maxDelta = this.maxDelta;\n\t\t\tevent.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;\n\t\t\tevent.paused = paused;\n\t\t\tevent.time = time;\n\t\t\tevent.runTime = time - this._pausedTime;\n\t\t\tthis.dispatchEvent(event);\n\t\t}\n\n\t\tthis._tickTimes.unshift(this._getTime() - time);\n\t\twhile (this._tickTimes.length > 100) { this._tickTimes.pop(); }\n\n\t\tthis._times.unshift(time);\n\t\twhile (this._times.length > 100) { this._times.pop(); }\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_getTime () {\n\t\tconst now = window.performance && window.performance.now;\n\t\treturn ((now && now.call(performance)) || (new Date().getTime())) - this._startTime;\n\t}\n\n\tstatic on (type, listener, scope, once, data, useCapture) { return _instance.on(type, listener, scope, once, data, useCapture); }\n\tstatic removeEventListener (type, listener, useCapture) { _instance.removeEventListener(type, listener, useCapture); }\n\tstatic off (type, listener, useCapture) { _instance.off(type, listener, useCapture); }\n\tstatic removeAllEventListeners (type) { _instance.removeAllEventListeners(type); }\n\tstatic dispatchEvent (eventObj, bubbles, cancelable) { return _instance.dispatchEvent(eventObj, bubbles, cancelable); }\n\tstatic hasEventListener (type) { return _instance.hasEventListener(type); }\n\tstatic willTrigger (type) { return _instance.willTrigger(type); }\n\tstatic toString () { return _instance.toString(); }\n\tstatic init () { _instance.init(); }\n\tstatic reset () { _instance.reset(); }\n\tstatic addEventListener (type, listener, useCapture) { _instance.addEventListener(type, listener, useCapture); }\n\tstatic getMeasuredTickTime (ticks) { return _instance.getMeasuredTickTime(ticks); }\n\tstatic getMeasuredFPS (ticks) { return _instance.getMeasuredFPS(ticks); }\n\tstatic getTime (runTime) { return _instance.getTime(runTime); }\n\tstatic getEventTime (runTime) { return _instance.getEventTime(runTime); }\n\tstatic getTicks (pauseable) { return _instance.getTicks(pauseable); }\n\n\tstatic get interval () { return _instance.interval; }\n\tstatic set interval (interval) { _instance.interval = interval; }\n\tstatic get framerate () { return _instance.framerate; }\n\tstatic set framerate (framerate) { _instance.framerate = framerate; }\n\tstatic get name () { return _instance.name; }\n\tstatic set name (name) { _instance.name = name; }\n\tstatic get timingMode () { return _instance.timingMode; }\n\tstatic set timingMode (timingMode) { _instance.timingMode = timingMode; }\n\tstatic get maxDelta () { return _instance.maxDelta; }\n\tstatic set maxDelta (maxDelta) { _instance.maxDelta = maxDelta; }\n\tstatic get paused () { return _instance.paused; }\n\tstatic set paused (paused) { _instance.paused = paused; }\n\n}\n\n/**\n * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused.\n *\n * @example\n * Ticker.addEventListener(\"tick\", event => console.log(\"Paused:\", event.paused, event.delta));\n *\n * @event core.Ticker#tick\n * @type {Object}\n * @property {Object} target The object that dispatched the event.\n * @property {string} type The event type.\n * @property {boolean} paused Indicates whether the ticker is currently paused.\n * @property {number} delta The time elapsed in ms since the last tick.\n * @property {number} time The total time in ms since Ticker was initialized.\n * @property {number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,\n * you could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.\n * @since 0.6.0\n */\n\nexport default Ticker;\n\n// the default Ticker instance\nconst _instance = new Ticker(\"createjs.global\");\n"]}